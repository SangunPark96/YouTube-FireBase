{"ast":null,"code":"var _jsxFileName = \"/Users/joshuanelson/Pursuit/youtube-project/src/components/Nav/SearchBar/SearchBar.js\",\n  _s = $RefreshSig$();\nimport './SearchBar.css';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getVideos } from '../../../api/fetch';\nimport { v1 as generateUniqueID } from 'uuid';\nimport VideoIndex from '../../VideoIndex/VideoIndex';\nimport testApi from '../../../api/testApi.json';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(_ref) {\n  _s();\n  let {\n    setError,\n    setVideos\n  } = _ref;\n  const navigate = useNavigate();\n  const [userSearchInput, setUserSearchInput] = useState('');\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [videoQuantity, setVideoQuantity] = useState(10);\n  function handleTextInput(event) {\n    setUserSearchInput(event.target.value);\n  }\n  function handleSearch(event) {\n    event.preventDefault();\n    if (userSearchInput) {\n      const duplicateSearch = searchHistory.find(input => input.search.toLowerCase() === userSearchInput.toLowerCase());\n      if (!duplicateSearch) {\n        setSearchHistory([...searchHistory, {\n          search: userSearchInput,\n          id: generateUniqueID()\n        }]);\n      }\n\n      //Reset the state\n      setUserSearchInput('');\n\n      //Make fetch call\n      getVideos(userSearchInput, videoQuantity) //Use testApi when trying to limit the number of calls to the api, otherwise use useSearchInput\n      .then(response => {\n        if (response.error) {\n          setError(true);\n        } else {\n          setVideos(response.items);\n          navigate(`/videos`);\n        }\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: handleTextInput,\n        value: userSearchInput,\n        type: \"text\",\n        id: \"searchInput\",\n        placeholder: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(AiOutlineSearch, {\n          className: \"search-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(SearchBar, \"NGUOiobHwsWDC9jpQjjIgHQxjb4=\", false, function () {\n  return [useNavigate];\n});\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","useNavigate","getVideos","v1","generateUniqueID","VideoIndex","testApi","AiOutlineSearch","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchBar","_ref","_s","setError","setVideos","navigate","userSearchInput","setUserSearchInput","searchHistory","setSearchHistory","videoQuantity","setVideoQuantity","handleTextInput","event","target","value","handleSearch","preventDefault","duplicateSearch","find","input","search","toLowerCase","id","then","response","error","items","children","onSubmit","className","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuanelson/Pursuit/youtube-project/src/components/Nav/SearchBar/SearchBar.js"],"sourcesContent":["import './SearchBar.css';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getVideos } from '../../../api/fetch';\nimport { v1 as generateUniqueID } from 'uuid';\nimport VideoIndex from '../../VideoIndex/VideoIndex';\nimport testApi from '../../../api/testApi.json';\nimport { AiOutlineSearch } from 'react-icons/ai';\n\nexport default function SearchBar({ setError, setVideos }) {\n  const navigate = useNavigate();\n  const [userSearchInput, setUserSearchInput] = useState('');\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [videoQuantity, setVideoQuantity] = useState(10);\n\n  function handleTextInput(event) {\n    setUserSearchInput(event.target.value);\n  }\n  function handleSearch(event) {\n    event.preventDefault();\n    if (userSearchInput) {\n      const duplicateSearch = searchHistory.find(\n        (input) => input.search.toLowerCase() === userSearchInput.toLowerCase()\n      );\n      if (!duplicateSearch) {\n        setSearchHistory([\n          ...searchHistory,\n          { search: userSearchInput, id: generateUniqueID() },\n        ]);\n      }\n\n      //Reset the state\n      setUserSearchInput('');\n\n      //Make fetch call\n      getVideos(userSearchInput, videoQuantity) //Use testApi when trying to limit the number of calls to the api, otherwise use useSearchInput\n        .then((response) => {\n          if (response.error) {\n            setError(true);\n          } else {\n            setVideos(response.items);\n            navigate(`/videos`);\n          }\n        });\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSearch} className=\"search-bar\">\n        <input\n          onChange={handleTextInput}\n          value={userSearchInput}\n          type=\"text\"\n          id=\"searchInput\"\n          placeholder=\"Search\"\n        />\n        <button type=\"submit\">\n          <AiOutlineSearch className=\"search-icon\" />\n        </button>\n      </form>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}